{"0": {"file_path": "./codefolder\\cnn.py", "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "1": {"file_path": "./codefolder\\cnn.py", "element": {"type": "class", "name": "CNN", "docstring": "Convolutional Neural Network with 3 convolutional layers and 3 fully connected layers.\nDropout is applied after each pooling layer and fully connected layer.\nfilters: 64, 64, 128, 128, 256, 256\nfully connected layers: 1024, 512, 10\nflatenning: 256 * 3 * 3", "methods": [{"type": "method", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 69, "end_line": 82}, {"type": "method", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 84, "end_line": 103}], "start_line": 61, "end_line": 103}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "2": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "plot_misclassified", "docstring": null, "args": ["misclassified_images", "misclassified_preds", "misclassified_true", "num_images"], "start_line": 194, "end_line": 223}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "3": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 69, "end_line": 82}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "4": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 84, "end_line": 103}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "5": {"file_path": "./codefolder\\mat_code.py", "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "6": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "square_root", "docstring": "This function calculates the square root of a number.", "args": ["num"], "start_line": 4, "end_line": 6}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "7": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "absolute_value", "docstring": "This function calculates the absolute value of a number.", "args": ["num"], "start_line": 9, "end_line": 11}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "8": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "factorial", "docstring": "This function calculates the factorial of a number.", "args": ["num"], "start_line": 14, "end_line": 16}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "9": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "logarithm", "docstring": "This function calculates the logarithm of a number with base 10.", "args": ["num"], "start_line": 19, "end_line": 21}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "10": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "power", "docstring": "This function calculates the power of a number.", "args": ["base", "exponent"], "start_line": 24, "end_line": 26}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "11": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "sine", "docstring": "This function calculates the sine of an angle in radians. sine can simulate the oscillation of a wave.", "args": ["angle"], "start_line": 29, "end_line": 31}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "12": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "fibonacci_sequence", "docstring": "This function calculates the Fibonacci sequence up to the given number of terms.", "args": ["n"], "start_line": 34, "end_line": 41}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "13": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "sum_first_100_natural_numbers", "docstring": "This function calculates the sum of the first 100 natural numbers.", "args": [], "start_line": 44, "end_line": 46}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}}