{"0": {"file_path": "./codefolder\\animal.py", "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\animal.py", "comments": []}}, "1": {"file_path": "./codefolder\\animal.py", "element": {"type": "class", "name": "Animal", "docstring": null, "methods": [{"type": "method", "name": "__init__", "docstring": null, "args": ["self", "name"], "start_line": 2, "end_line": 3}, {"type": "method", "name": "speak", "docstring": null, "args": ["self"], "start_line": 5, "end_line": 6}, {"type": "method", "name": "fibonacci_sequence", "docstring": null, "args": ["n"], "start_line": 8, "end_line": 9}], "start_line": 1, "end_line": 9}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\animal.py", "comments": []}}, "2": {"file_path": "./codefolder\\animal.py", "element": {"type": "function", "name": "__init__", "docstring": null, "args": ["self", "name"], "start_line": 2, "end_line": 3}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\animal.py", "comments": []}}, "3": {"file_path": "./codefolder\\animal.py", "element": {"type": "function", "name": "speak", "docstring": null, "args": ["self"], "start_line": 5, "end_line": 6}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\animal.py", "comments": []}}, "4": {"file_path": "./codefolder\\animal.py", "element": {"type": "function", "name": "fibonacci_sequence", "docstring": null, "args": ["n"], "start_line": 8, "end_line": 9}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\animal.py", "comments": []}}, "5": {"file_path": "./codefolder\\ann.py", "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "6": {"file_path": "./codefolder\\ann.py", "element": {"type": "class", "name": "SimplePerceptron", "docstring": null, "methods": [{"type": "method", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 15, "end_line": 19}, {"type": "method", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 21, "end_line": 26}], "start_line": 14, "end_line": 26}, "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "7": {"file_path": "./codefolder\\ann.py", "element": {"type": "function", "name": "train", "docstring": null, "args": ["model", "loader", "criterion", "optimizer", "device"], "start_line": 46, "end_line": 58}, "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "8": {"file_path": "./codefolder\\ann.py", "element": {"type": "function", "name": "test", "docstring": null, "args": ["model", "loader", "criterion", "device"], "start_line": 60, "end_line": 69}, "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "9": {"file_path": "./codefolder\\ann.py", "element": {"type": "function", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 15, "end_line": 19}, "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "10": {"file_path": "./codefolder\\ann.py", "element": {"type": "function", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 21, "end_line": 26}, "metadata": {"num_classes": 1, "num_functions": 4, "file_path": "./codefolder\\ann.py", "comments": ["# Check for CUDA device", "# Define the network architecture", "# Model initialization", "# Prepare data", "# Initialize loss function and optimizer", "# Define train and test functions", "# Training loop", "# Plotting"]}}, "11": {"file_path": "./codefolder\\cnn.py", "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "12": {"file_path": "./codefolder\\cnn.py", "element": {"type": "class", "name": "CNN", "docstring": "Convolutional Neural Network with 3 convolutional layers and 3 fully connected layers.\nDropout is applied after each pooling layer and fully connected layer.\nfilters: 64, 64, 128, 128, 256, 256\nfully connected layers: 1024, 512, 10\nflatenning: 256 * 3 * 3", "methods": [{"type": "method", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 69, "end_line": 82}, {"type": "method", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 84, "end_line": 103}], "start_line": 61, "end_line": 103}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "13": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "plot_misclassified", "docstring": null, "args": ["misclassified_images", "misclassified_preds", "misclassified_true", "num_images"], "start_line": 194, "end_line": 223}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "14": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "__init__", "docstring": null, "args": ["self"], "start_line": 69, "end_line": 82}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "15": {"file_path": "./codefolder\\cnn.py", "element": {"type": "function", "name": "forward", "docstring": null, "args": ["self", "x"], "start_line": 84, "end_line": 103}, "metadata": {"num_classes": 1, "num_functions": 3, "file_path": "./codefolder\\cnn.py", "comments": ["# Load MNIST dataset", "# Convert images to PyTorch tensors", "# Normalize the images", "# Load MNIST dataset", "# Data augmentation", "# Define a sequence of data transformations to apply to the images for data augmentation to prevent overfitting", "# Rotate the image by 10 degrees", "# Adjust the sharpness of the image", "# Translate the image horizontally and vertically", "# Shear the image by 10 degrees", "# Convert images to PyTorch tensors", "# Normalize the images", "# Create data loaders", "# Data visualization", "# Add title to the figure", "# Convolutional Neural Network", "# Dropout with 25% probability ", "# Dropout with 50% probability", "# Apply Leaky ReLU activation function", "# Apply dropout", "# Apply dropout", "# Instantiate the network, loss function, and optimizer", "# Cross-entropy loss", "# Adam optimizer with learning rate of 0.0001", "# Initialize lists to track the loss and accuracy", "# Lists to hold misclassified example data", "# Training loop", "# Loop over the dataset multiple times", "# Get the inputs; data is a list of [inputs, labels]", "# Evaluate the model", "# correct = 0", "# Turn off gradients for validation, saves memory and computations", "# Collect misclassified examples", "# Plotting the training and test losses", "# Plotting the training and test accuracies", "# Ensure we have enough images to plot", "# Set up subplot dimensions", "# Fix for the edge case where we have only one subplot", "# Remove channel dimension", "# Plot image", "# Top row for images", "# Optional: Add more plots below each image if needed", "# For example, plotting the difference or error heatmap", "# ax2 = axes[1][i]", "# ax2.imshow(...)", "# Call the function to plot misclassified examples", "# Save the model"]}}, "16": {"file_path": "./codefolder\\mat_code.py", "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "17": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "square_root", "docstring": "This function calculates the square root of a number.", "args": ["num"], "start_line": 4, "end_line": 6}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "18": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "absolute_value", "docstring": "This function calculates the absolute value of a number.", "args": ["num"], "start_line": 9, "end_line": 11}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "19": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "factorial", "docstring": "This function calculates the factorial of a number.", "args": ["num"], "start_line": 14, "end_line": 16}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "20": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "logarithm", "docstring": "This function calculates the logarithm of a number with base 10.", "args": ["num"], "start_line": 19, "end_line": 21}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "21": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "power", "docstring": "This function calculates the power of a number.", "args": ["base", "exponent"], "start_line": 24, "end_line": 26}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "22": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "sine", "docstring": "This function calculates the sine of an angle in radians. sine can simulate the oscillation of a wave.", "args": ["angle"], "start_line": 29, "end_line": 31}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "23": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "fibonacci_sequence", "docstring": "This function calculates the Fibonacci sequence up to the given number of terms.", "args": ["n"], "start_line": 34, "end_line": 41}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "24": {"file_path": "./codefolder\\mat_code.py", "element": {"type": "function", "name": "sum_first_100_natural_numbers", "docstring": "This function calculates the sum of the first 100 natural numbers.", "args": [], "start_line": 44, "end_line": 46}, "metadata": {"num_classes": 0, "num_functions": 8, "file_path": "./codefolder\\mat_code.py", "comments": ["# Function to calculate the square root of a number", "# Function to calculate the absolute value of a number", "# Function to calculate the factorial of a number", "# Function to calculate the logarithm of a number with base 10", "# Function to calculate the power of a number", "# Function to calculate the sine of an angle in radians", "# Function for Fibonacci sequence", "# Initialize the sequence with the first two numbers", "# Calculate the Fibonacci sequence up to the given number of terms", "# Function to calculate the sum of the first 100 natural numbers"]}}, "25": {"file_path": "./codefolder\\resnet50.py", "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "26": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "find_latest_checkpoint", "docstring": null, "args": ["checkpoint_dir"], "start_line": 15, "end_line": 20}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "27": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "class", "name": "AircraftDataset", "docstring": null, "methods": [{"type": "method", "name": "__init__", "docstring": null, "args": ["self", "csv_file", "img_dir", "transform"], "start_line": 23, "end_line": 27}, {"type": "method", "name": "__len__", "docstring": null, "args": ["self"], "start_line": 28, "end_line": 29}, {"type": "method", "name": "__getitem__", "docstring": null, "args": ["self", "idx"], "start_line": 30, "end_line": 36}], "start_line": 22, "end_line": 36}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "28": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "save_checkpoint", "docstring": null, "args": ["model", "optimizer", "scheduler", "epoch", "filename"], "start_line": 81, "end_line": 88}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "29": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "load_checkpoint", "docstring": null, "args": ["model", "optimizer", "scheduler", "filename"], "start_line": 90, "end_line": 96}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "30": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "train_model", "docstring": null, "args": ["model", "criterion", "optimizer", "scheduler", "num_epochs", "start_epoch", "device"], "start_line": 107, "end_line": 211}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "31": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "__init__", "docstring": null, "args": ["self", "csv_file", "img_dir", "transform"], "start_line": 23, "end_line": 27}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "32": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "__len__", "docstring": null, "args": ["self"], "start_line": 28, "end_line": 29}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}, "33": {"file_path": "./codefolder\\resnet50.py", "element": {"type": "function", "name": "__getitem__", "docstring": null, "args": ["self", "idx"], "start_line": 30, "end_line": 36}, "metadata": {"num_classes": 1, "num_functions": 7, "file_path": "./codefolder\\resnet50.py", "comments": ["# Function to find the latest checkpoint file", "# Combine both train and test dataset", "# Initialize the log file with the fieldnames", "# Temporary storage for the current epoch's loss and accuracy", "# Set model to training mode", "# Set model to evaluation mode", "# Convert to percentage", "# Save the model"]}}}